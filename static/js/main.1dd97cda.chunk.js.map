{"version":3,"sources":["components/Styled/index.js","App.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","App","styled","main","PaddedContainer","section","Row","div","Title","h1","SubTitle","h2","Desc","p","Monthly","FormattedP","SingUp","button","WhyUs","SectionTitle","List","ul","map","e","i","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"izGAEO,IAAMA,EAAcC,YAAH,KA0BXC,EAAMC,IAAOC,KAAV,KAWHC,EAAkBF,IAAOG,QAAV,KAKfC,EAAMJ,IAAOK,IAAV,KAMHC,EAAQN,IAAOO,GAAV,KAMLC,EAAWR,IAAOS,GAAV,KAMRC,EAAOV,IAAOW,EAAV,KAKJC,EAAUZ,YAAOE,EAAPF,CAAH,KAOPa,EAAab,IAAOW,EAAV,KASVG,EAASd,IAAOe,OAAV,KAuBNC,EAAQhB,YAAOE,EAAPF,CAAH,KAOLiB,EAAejB,IAAOS,GAAV,KAIZS,EAAOlB,IAAOmB,GAAV,KC9EFpB,MApCf,WAUE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,2BACA,kBAAC,EAAD,iDACA,kBAAC,EAAD,4JAEF,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,6BACA,kBAAC,EAAD,KAAe,uCAAf,eACA,2DACA,kBAAC,EAAD,iBAEF,kBAAC,EAAD,KACE,kBAAC,EAAD,eACA,kBAAC,EAAD,KA1BM,CACZ,gCACA,4BACA,mBACA,6BACA,kBACA,kBACA,yBAoBeqB,KAAI,SAACC,EAAGC,GAAJ,OAAU,wBAAIC,IAAKD,GAAID,WCnB1BG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1dd97cda.chunk.js","sourcesContent":["import styled, {createGlobalStyle} from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    :root {\r\n        --cyan: hsl(179, 62%, 43%);\r\n        --yellow: hsl(71, 73%, 54%);\r\n        --gray: hsl(204, 43%, 93%);\r\n        --blue: hsl(218, 22%, 67%);\r\n        --lightblue: hsl(179, 47%, 52%);\r\n    }\r\n\r\n    *, *::before, *::after {\r\n        box-sizing: border-box;\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n    \r\n    body {\r\n        font-family: 'Karla', sans-serif;\r\n        font-size: 16px;\r\n        color: #FFFFFF;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        background-color: hsl(206, 47%, 93%);\r\n    }\r\n`;\r\n\r\nexport const App = styled.main`\r\n    border-radius: 10px;\r\n    overflow: hidden;\r\n    margin: 5em auto;\r\n    width: min(90%, 635px);\r\n    box-shadow: 1px 1px 10px rgba(0, 0, 0, 0.1), -1px -1px 10px rgba(0, 0, 0, 0.1);\r\n    @media (min-width: 600px) {\r\n        margin: 10.1em auto;\r\n    }\r\n`;\r\n\r\nexport const PaddedContainer = styled.section`\r\n    padding: 2.45em;\r\n    background: white;\r\n`;\r\n\r\nexport const Row = styled.div`\r\n    @media (min-width: 600px) {\r\n        display: flex;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n    color: var(--cyan);\r\n    line-height: 1.4;\r\n    font-size: 1.5rem;\r\n`;\r\n\r\nexport const SubTitle = styled.h2`\r\n    color: var(--yellow);\r\n    font-size: 1.1rem;\r\n    margin: 1.4em 0 0.5em;\r\n`;\r\n\r\nexport const Desc = styled.p`\r\n    color: var(--blue);\r\n    line-height: 1.5;\r\n`;\r\n\r\nexport const Monthly = styled(PaddedContainer)`\r\n    background: var(--cyan);\r\n    @media (min-width: 600px) {\r\n        flex: 50% 1 1;\r\n    }\r\n`;\r\n\r\nexport const FormattedP = styled.p`\r\n    margin: 1em 0;\r\n    strong {\r\n        font-size: 2rem;\r\n        padding-right: .2em;\r\n        vertical-align: middle;\r\n    }\r\n`;\r\n\r\nexport const SingUp = styled.button`\r\n    --blurRadius: 5px;\r\n    background: var(--yellow);\r\n    width: 100%;\r\n    display: block;\r\n    color: white;\r\n    border: 0;\r\n    padding: 1em 0;\r\n    border-radius: 5px;\r\n    margin-top: 1.6em;\r\n    font-size: 1rem;\r\n    transition: 0.5s;\r\n    cursor: pointer;\r\n    outline: none;\r\n    box-shadow: 5px 5px var(--blurRadius) rgba(0, 0, 0, 0.5),           -5px 5px var(--blurRadius) rgba(0, 0, 0, 0.5);\r\n\r\n    &:hover {\r\n        --blurRadius: 10px;\r\n        transform: translateY(-5px);\r\n        box-shadow: 5px 5px var(--blurRadius) rgba(0, 0, 0, 0.3),           -5px 5px var(--blurRadius) rgba(0, 0, 0, 0.3);\r\n    }\r\n`;\r\n\r\nexport const WhyUs = styled(PaddedContainer)`\r\n    background: var(--lightblue);\r\n    @media (min-width: 600px) {\r\n        flex: 50% 1 1;\r\n    }\r\n`;\r\n\r\nexport const SectionTitle = styled.h2`\r\n    margin-bottom: 1em;\r\n    font-size: 1.1rem;\r\n`;\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    line-height: 1.5;\r\n    font-size: 0.8rem;\r\n`;\r\n","import React from 'react';\nimport * as St from './components/Styled';\n\nfunction App() {\n  const WHYUS = [\n    'Tutorials by industry experts',\n    'Peer & expert code review',\n    'Coding exercises',\n    'Access to our GitHub repos',\n    'Community forum',\n    'Flashcard decks',\n    'New videos every week',\n  ]\n  return (\n    <St.App>\n      <St.GlobalStyle />\n      <St.PaddedContainer>\n        <St.Title>Join our community</St.Title>\n        <St.SubTitle>30-day, hassle-free money back guarantee</St.SubTitle>\n        <St.Desc>Gain access to our full library of tutorials along with expert code reviews. Perfect for any developers who are serious about honing their skills.</St.Desc>\n      </St.PaddedContainer>\n      <St.Row>\n        <St.Monthly>\n          <St.SectionTitle>Monthly Subscription</St.SectionTitle>\n          <St.FormattedP><strong>$29</strong>  per month</St.FormattedP>\n          <p>Full access for less than $1</p>\n          <St.SingUp>Sign Up</St.SingUp>\n        </St.Monthly>\n        <St.WhyUs>\n          <St.SectionTitle>Why Us</St.SectionTitle>\n          <St.List>\n            {WHYUS.map((e, i) => <li key={i}>{e}</li>)}\n          </St.List>\n        </St.WhyUs>\n      </St.Row>\n    </St.App>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}